"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/chat";
exports.ids = ["pages/api/chat"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cchat.ts&middlewareConfigBase64=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cchat.ts&middlewareConfigBase64=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_chat_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\chat.ts */ \"(api)/./pages/api/chat.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_chat_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_chat_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/chat\",\n        pathname: \"/api/chat\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_chat_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmNoYXQmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyU1Q2FwaSU1Q2NoYXQudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDa0Q7QUFDbEQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLCtDQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQywrQ0FBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWRkeS1jaGF0Lz9iYmUyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxcY2hhdC50c1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2NoYXRcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9jaGF0XCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cchat.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/chat.ts":
/*!***************************!*\
  !*** ./pages/api/chat.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\nconst GEMINI_API_URL = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\nconst MISTRAL_API_URL = \"https://api.mistral.ai/v1/chat/completions\";\nconst CLAUDE_API_URL = \"https://api.anthropic.com/v1/messages\";\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            message: \"Method not allowed\"\n        });\n    }\n    const { message, model, responseLength = \"medium\", temperature = 0.7, chatMode = \"standard\", apiKey } = req.body;\n    // Calculate max tokens based on response length setting\n    const getMaxTokens = ()=>{\n        switch(responseLength){\n            case \"short\":\n                return 300;\n            case \"medium\":\n                return 1000;\n            case \"long\":\n                return 2000;\n            default:\n                return 1000;\n        }\n    };\n    const maxTokens = getMaxTokens();\n    // Optional: Add specialized model parameters based on chat mode\n    const getModeSpecificParams = (modelType)=>{\n        // Base settings\n        const params = {\n            temperature: parseFloat(temperature.toString()),\n            max_tokens: maxTokens\n        };\n        // Add model-specific adjustments for each chat mode\n        switch(chatMode){\n            case \"coding\":\n                // Optimal for code generation\n                if (modelType === \"gemini\") {\n                    params.topP = 0.95;\n                    params.topK = 40;\n                } else if (modelType === \"mistral\") {\n                    params.top_p = 0.95;\n                }\n                break;\n            case \"precise\":\n                // Lower temperature already set, but add other precision parameters\n                if (modelType === \"gemini\") {\n                    params.topP = 0.75;\n                } else if (modelType === \"mistral\") {\n                    params.top_p = 0.75;\n                }\n                break;\n            case \"creative\":\n                // Higher temperature already set, can add other creativity parameters\n                if (modelType === \"gemini\") {\n                    params.topP = 0.98;\n                    params.topK = 60;\n                } else if (modelType === \"mistral\") {\n                    params.top_p = 0.98;\n                }\n                break;\n        }\n        return params;\n    };\n    try {\n        switch(model){\n            case \"gemini\":\n                {\n                    // Use user's API key if provided, otherwise use environment variable\n                    const currentApiKey = apiKey || process.env.GEMINI_API_KEY;\n                    if (!currentApiKey) {\n                        return res.status(400).json({\n                            error: \"Missing API key for Gemini\",\n                            requiresApiKey: true\n                        });\n                    }\n                    // Test that the Gemini API key is roughly valid (it should be a non-empty string)\n                    if (typeof currentApiKey !== \"string\" || !currentApiKey.trim()) {\n                        return res.status(401).json({\n                            error: \"Invalid Gemini API key format\",\n                            invalidApiKey: true\n                        });\n                    }\n                    // Apply chat mode specific parameters\n                    const modeParams = getModeSpecificParams(\"gemini\");\n                    const geminiResponse = await fetch(`${GEMINI_API_URL}?key=${currentApiKey}`, {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            contents: [\n                                {\n                                    parts: [\n                                        {\n                                            text: message\n                                        }\n                                    ]\n                                }\n                            ],\n                            generationConfig: {\n                                maxOutputTokens: maxTokens,\n                                temperature: modeParams.temperature,\n                                topP: modeParams.topP || undefined,\n                                topK: modeParams.topK || undefined\n                            }\n                        })\n                    });\n                    // Handle error responses\n                    if (!geminiResponse.ok) {\n                        const errorText = await geminiResponse.text();\n                        console.error(\"Gemini API Error:\", errorText);\n                        return res.status(geminiResponse.status).json({\n                            error: `Gemini API error: ${geminiResponse.statusText}`,\n                            details: errorText,\n                            invalidApiKey: geminiResponse.status === 400 || geminiResponse.status === 401\n                        });\n                    }\n                    const geminiData = await geminiResponse.json();\n                    if (!geminiData.candidates || !geminiData.candidates[0]?.content?.parts?.[0]?.text) {\n                        return res.status(500).json({\n                            error: \"Invalid response structure from Gemini\"\n                        });\n                    }\n                    return res.status(200).json({\n                        text: geminiData.candidates[0].content.parts[0].text,\n                        chatMode: chatMode // Return the chat mode used\n                    });\n                }\n            case \"claude\":\n                {\n                    // Use user's API key if provided, otherwise use environment variable\n                    const currentApiKey = apiKey || process.env.CLAUDE_API_KEY;\n                    if (!currentApiKey) {\n                        return res.status(400).json({\n                            error: \"Missing API key for Claude\",\n                            requiresApiKey: true\n                        });\n                    }\n                    // Test that the Claude API key is roughly valid (it should be a non-empty string)\n                    if (typeof currentApiKey !== \"string\" || !currentApiKey.trim()) {\n                        return res.status(401).json({\n                            error: \"Invalid Claude API key format\",\n                            invalidApiKey: true\n                        });\n                    }\n                    // Apply chat mode specific parameters\n                    const modeParams = getModeSpecificParams(\"claude\");\n                    const claudeResponse = await fetch(CLAUDE_API_URL, {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            \"anthropic-version\": \"2023-06-01\",\n                            \"x-api-key\": currentApiKey\n                        },\n                        body: JSON.stringify({\n                            model: \"claude-3-sonnet-20240229\",\n                            messages: [\n                                {\n                                    role: \"user\",\n                                    content: message\n                                }\n                            ],\n                            stream: true,\n                            max_tokens: maxTokens,\n                            temperature: modeParams.temperature\n                        })\n                    });\n                    if (!claudeResponse.ok) {\n                        const errorText = await claudeResponse.text();\n                        console.error(\"Claude API Error:\", errorText);\n                        return res.status(claudeResponse.status).json({\n                            error: `Claude API error: ${claudeResponse.statusText}`,\n                            details: errorText,\n                            invalidApiKey: claudeResponse.status === 400 || claudeResponse.status === 401\n                        });\n                    }\n                    // Set headers for streaming\n                    res.setHeader(\"Content-Type\", \"text/event-stream\");\n                    res.setHeader(\"Cache-Control\", \"no-cache\");\n                    res.setHeader(\"Connection\", \"keep-alive\");\n                    const reader = claudeResponse.body?.getReader();\n                    const decoder = new TextDecoder();\n                    try {\n                        while(true){\n                            const { done, value } = await reader.read();\n                            if (done) break;\n                            const chunk = decoder.decode(value);\n                            const lines = chunk.split(\"\\n\");\n                            for (const line of lines){\n                                if (line.startsWith(\"data: \") && line !== \"data: [DONE]\") {\n                                    try {\n                                        const data = JSON.parse(line.slice(6));\n                                        if (data.type === \"content_block_delta\" && data.delta?.text) {\n                                            res.write(`data: ${JSON.stringify({\n                                                text: data.delta.text,\n                                                chatMode: chatMode // Add the chat mode to stream data\n                                            })}\\n\\n`);\n                                        }\n                                    } catch (e) {\n                                        console.error(\"Error parsing SSE data:\", e);\n                                    }\n                                }\n                            }\n                        }\n                    } finally{\n                        reader?.releaseLock();\n                        res.end();\n                    }\n                    return;\n                }\n            case \"mistral\":\n                {\n                    // Use user's API key if provided, otherwise use environment variable\n                    const currentApiKey = apiKey || process.env.MISTRAL_API_KEY;\n                    if (!currentApiKey) {\n                        return res.status(400).json({\n                            error: \"Missing API key for Mistral\",\n                            requiresApiKey: true\n                        });\n                    }\n                    // Test that the Mistral API key is roughly valid (it should be a non-empty string)\n                    if (typeof currentApiKey !== \"string\" || !currentApiKey.trim()) {\n                        return res.status(401).json({\n                            error: \"Invalid Mistral API key format\",\n                            invalidApiKey: true\n                        });\n                    }\n                    // Apply chat mode specific parameters\n                    const modeParams = getModeSpecificParams(\"mistral\");\n                    const mistralResponse = await fetch(MISTRAL_API_URL, {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            \"Authorization\": `Bearer ${currentApiKey}`\n                        },\n                        body: JSON.stringify({\n                            model: \"mistral-tiny\",\n                            messages: [\n                                {\n                                    role: \"user\",\n                                    content: message\n                                }\n                            ],\n                            max_tokens: maxTokens,\n                            temperature: modeParams.temperature,\n                            top_p: modeParams.top_p || undefined\n                        })\n                    });\n                    if (!mistralResponse.ok) {\n                        const errorText = await mistralResponse.text();\n                        console.error(\"Mistral API Error:\", errorText);\n                        return res.status(mistralResponse.status).json({\n                            error: `Mistral API error: ${mistralResponse.statusText}`,\n                            details: errorText,\n                            invalidApiKey: mistralResponse.status === 400 || mistralResponse.status === 401\n                        });\n                    }\n                    const mistralData = await mistralResponse.json();\n                    return res.status(200).json({\n                        text: mistralData.choices?.[0]?.message?.content || \"No response from Mistral\",\n                        chatMode: chatMode\n                    });\n                }\n            default:\n                return res.status(400).json({\n                    message: \"Invalid model specified\"\n                });\n        }\n    } catch (error) {\n        console.error(\"API Error:\", error);\n        return res.status(500).json({\n            error: error.message || \"Internal server error\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/chat.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cchat.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();